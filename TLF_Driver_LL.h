/**********************************************************************************************************************
 * \file TLF_Driver_LL.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef GENERAL_TLF_DRIVER_LL_H_
#define GENERAL_TLF_DRIVER_LL_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/


#include "Platform_Types.h" // Standard automotive types (uint8, uint16, etc.)
#include "IfxQspi.h"        // Placeholder for QSPI iLLDs
#include "IfxScuWdt.h"      // Placeholder for AURIX Watchdog iLLDs

/******************************************************************************
 * TLF35584 REGISTER MAP & COMMAND DEFINITIONS (Based on Documentation)
 ******************************************************************************/

// --- Critical Register Offsets (Bus Interface 0H-3FH)
#define TLF_REG_DEVCFG0     (0x00U) // Device Configuration 0 (*R2)
#define TLF_REG_DEVCFG2     (0x02U) // Device Configuration 2 (*R2)
#define TLF_REG_DEVCTRL     (0x04U) // Device Control (STATEREQ)
#define TLF_REG_DEVCTRLN    (0x05U) // Device Control Complement (Inverted DEVCTRL)
#define TLF_REG_WWDSCMD     (0x17U) // Window Watchdog Service Command (*R2) [1]
#define TLF_REG_DEVSTAT     (0x0CU) // Device Status (Current State)
#define TLF_REG_SYSFAIL     (0x1AU) // System Failure Status (*R1)

// --- State Request Command Values (STATEREQ Field)
#define TLF_CMD_INIT        (0xE8U) // Request re-entry into INIT state
#define TLF_CMD_NORMAL      (0xDDU) // Request NORMAL operational state
#define TLF_CMD_STANDBY     (0x3DU) // Request STANDBY low-power state [2]
#define TLF_CMD_SLEEP       (0x4DU) // Request SLEEP deep-sleep state [2]

// --- PMIC Device States (Read from DEVSTAT register)
typedef enum {
    TLF_PMIC_STATE_POWERDOWN    = 0x00,
    TLF_PMIC_STATE_INIT         = 0x03,
    TLF_PMIC_STATE_NORMAL       = 0x04,
    TLF_PMIC_STATE_STANDBY      = 0x05,
    TLF_PMIC_STATE_SLEEP        = 0x06,
    TLF_PMIC_STATE_WAKE         = 0x07,
    TLF_PMIC_STATE_FAILSAFE     = 0x08
} TlfPmicState_t;

// --- AURIX MCU Operational States (Internal FSM)
typedef enum {
    MCU_STATE_POWER_ON = 0,             // Initial state after system reset (ROT pulse)
    MCU_STATE_INITIALIZE,               // QSPI setup, PMIC configuration, WWD start [3]
    MCU_STATE_NORMAL_RUN,               // Main operation, PFM-gated WWD service
    MCU_STATE_STANDBY_PREPARE,          // Initiate STANDBY transition
    MCU_STATE_SLEEP_PREPARE,            // Initiate SLEEP transition
    MCU_STATE_TRANSITION_WAIT,          // Waiting for PMIC state change confirmation
    MCU_STATE_FAILSAFE_RECOVERY         // PMIC detected critical error (OV, WWD failure)
} TlfMcuState_t;

/******************************************************************************
 * EXTERNAL API FUNCTION PROTOTYPES
 ******************************************************************************/

// --- FSM Control API (Called by application layer)
void TLF_State_Machine_Run(void);
void TLF_Request_GoToNormal(void);
void TLF_Request_GoToStandby(void);
void TLF_Request_GoToSleep(void);

// --- Low-Level Driver Prototypes (Implementation details)
TlfPmicState_t TLF_CheckPmicStatus(void);
uint8 TLF_ServiceWwd(void);
uint8 TLF_SetStateRequest(uint8 stateReqValue);
uint16 TLF_ReadRegister(uint8 regAddress);
void TLF_ProtectedWriteConfig(uint8 regAddress, uint8 data);

// --- System Utility Prototypes (Placeholders for integration with other layers)
void PFM_Service_System_Wwd(void);
uint8 PFM_Check_Passed(void);
void MCU_Service_Internal_Wdt(void);


#endif /* GENERAL_TLF_DRIVER_LL_H_ */
